#! sometimes it's necessary to perform complex
#! text templating within a particular YAML node

#@ val1 = "value1"
#@ val2 = "value2"

key: #@ "before {} middle {} after".format(val1, val2)

#! alternatively you can use inline string templating tags
#! (@ ... @) to execute code and (@= @) to yield string
#! value; for text templating to take effect, node
#! must be annotated with @yaml/text-templated-strings

#@yaml/text-templated-strings
key_alt: "before (@= val1 @) middle (@= val2 @) after"

#! @yaml/text-templated-strings annotation applies to
#! all child nodes as well

#@yaml/text-templated-strings
---
key_alt2:
  key_(@= val1 @): "middle (@= val2 @) after"

#! more complex text templates could be split out into
#! separate library files where text formatting is easier

#@ load("data.lib.txt", "name_from_text")
---
key_str: #@ name_from_text()
