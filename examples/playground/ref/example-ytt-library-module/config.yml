#! any custom library that contains templates could be
#! used to produce its result programmatically.
#! in this example we are using generic app library
#! (found under _ytt_lib/app) to produce configuration
#! for two apps: backend and frontend. frontend needs
#! to know backend url to communicate with it.

#@ load("@ytt:template", "template")
#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")

#! build configuration for the backend app

#@ def backend():
name: backend
image: user/backend
#@ end

#@ backend = library.get("app").with_data_values(backend())

#@ def frontend():
name: frontend
image: user/frontend
#@ end

#! frontend updates will be overlayed on top of
#! frontend app configuration to inject backend url as
#! an environment variable

#@ def frontend_updates():
#@overlay/match by=overlay.subset({"kind":"Deployment"})
---
spec:
  template:
    spec:
      containers:
      #@overlay/match by="name"
      - name: default
        #@overlay/match missing_ok=True
        env:
        - name: BACKEND_URL
          value: #@ backend.export("svc_url")()
#@ end

#! build configuration for the frontend app

#@ frontend = library.get("app").with_data_values(frontend())

--- #@ template.replace(backend.eval())
--- #@ template.replace(overlay.apply(frontend.eval(), frontend_updates()))
